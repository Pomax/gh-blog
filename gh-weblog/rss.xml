<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<atom:link href="http://pomax.github.io/gh-blog/gh-weblog/rss.xml" rel="self" type="application/rss+xml" />
<title>A Github Weblog</title>
<description>A simple github blog using markdown and octokit</description>
<link>http://pomax.github.io/gh-blog</link>
<lastBuildDate>Tue, 30 Dec 2014 22:16:07 GMT</lastBuildDate>
<pubDate>Tue, 30 Dec 2014 22:16:07 GMT</pubDate>
<ttl>1440</ttl>
<item>
<title>New Entry</title>
<description>&lt;h1 id="new-entry"&gt;New Entry&lt;/h1&gt;
&lt;p&gt;...&lt;/p&gt;
</description>

<link>http://pomax.github.io/gh-blog/#gh-weblog-1419977765332</link>
<guid>http://pomax.github.io/gh-blog/#gh-weblog-1419977765332</guid>
<pubDate>Tue, 30 Dec 2014 22:16:05 GMT</pubDate>
</item>
<item>
<title>A client-side Mahjong scoring app, using React</title>
<description>&lt;h1 id="a-client-side-mahjong-scoring-app-using-react"&gt;A client-side Mahjong scoring app, using React&lt;/h1&gt;
&lt;p&gt;2 weeks ago, on a Saturday, I thought I&#39;d revisit my old &lt;a href="http://pomax.nihongoresources.com/downloads/mjscoring"&gt;PHP-based&lt;/a&gt; &lt;a href="http://en.wikipedia.org/wiki/Mahjong"&gt;mahjong&lt;/a&gt; scoring application. We like playing Chinese Classical rules, which are a little more &quot;fun&quot; and a little less &quot;optimised for gambling&quot; that the usual rules, and one aspect of that is that it&#39;s much harder to track scores: everyone pays the winner, but the losers settle score differences amongst themselves in addition to paying the winner, too, and there&#39;s a fair number of different things to score. Plus, you can get both points and &quot;doubles&quot;, the latter of which doubles (surprise!) your total point score. Only 28 tile points but 5 doubles? That&#39;s 896 points total.&lt;/p&gt;
&lt;p&gt;On that fateful Saturday, I decided I&#39;d put &lt;a href="https://www.polymer-project.org"&gt;Polymer&lt;/a&gt; to the test, and see if it&#39;d hold up. I was doing my dev work in &lt;a href="http://www.sublimetext.com"&gt;Sublime Text 2&lt;/a&gt; and &lt;a href="http://www.google.com/chrome"&gt;Chrome&lt;/a&gt;, and that combination worked just fine. And then after a day and a few hours on sunday, I tried it in &lt;a href="http://firefox.com"&gt;Firefox&lt;/a&gt;, and all my joy turned to hatred as the app broke all over the place. Polymer plain old didn&#39;t work (and at this point, sad to say, Polymer is dead to me). The bits that did we slow, the bits that didn&#39;t ultimately gave me too much of a headache trying to fix specifically for Firefox. I literally gave up: it was easy to port, too bad technology let me down.&lt;/p&gt;
&lt;p&gt;However, as per the previous post, the Mozilla Foundation engineering team is considering using &lt;a href="http://facebook.github.io/react"&gt;React&lt;/a&gt;, and what better way to learn it than to take that broken Polymer app, and rewrite it as a React app? Long story short: a week later I ported the app from Polymer to React, and React works brilliantly in all browsers (yes, IE11 and Android 4.2 work) and is &lt;em&gt;fast&lt;/em&gt; too boot. So... I have a new app up and running for scoring mahjong, and that makes me happy!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pomax.github.io/mjscoring.js"&gt;&lt;img src="gh-weblog/images/mjscoring-screenshot.jpg" class="border"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can find it over on &lt;a href="http://pomax.github.io/mjscoring.js"&gt;http://pomax.github.io/mjscoring.js&lt;/a&gt;, with the source code living over on &lt;a href="https://github.com/pomax/mjscoring.js"&gt;github&lt;/a&gt; and I&#39;ve been using it along side some games played in &lt;a href="https://www.4windsmj.com"&gt;Four Winds Mahjong&lt;/a&gt; (which may look old, but is still the best at actually seriously playing MJ that I know of) to see if the scoring holds up, and after some initial bug fixing, it feels like it&#39;s doing just that. No more having to rely on a set of unmaintanable old PHP scripts anymore, and I even wrote it so that it&#39;ll be relatively easy to add in new scoring rules, for when you prefer to play HK rules. Which can be nice sometimes, if you don&#39;t want the cut-throat &quot;I need to destroy you, you&#39;re winning too much, but first I need to become east&quot; excitement that Chinese Classical rules bring to the table.&lt;/p&gt;
&lt;p&gt;Game on.&lt;/p&gt;
</description>
<category>React</category>
<category>Mahjong</category>
<link>http://pomax.github.io/gh-blog/#gh-weblog-1419403759737</link>
<guid>http://pomax.github.io/gh-blog/#gh-weblog-1419403759737</guid>
<pubDate>Wed, 24 Dec 2014 06:49:19 GMT</pubDate>
</item>
<item>
<title>So you're thinking about using React</title>
<description>&lt;h1 id="so-you-re-thinking-about-using-react"&gt;So you&#39;re thinking about using React&lt;/h1&gt;
&lt;p&gt;I was in the same boat: at the Mozilla Foundation we&#39;re considering using React for the next few months as client-side framework of choice for new apps, and that means learning a new technology, because you can&#39;t make a decision on something you don&#39;t understand. So I took an app I was unhappy with due to framework choice, and rewrote the whole thing in React, taking notes on everything that felt weird, or didn&#39;t click.&lt;/p&gt;
&lt;p&gt;I ended up writing about 6000 words worth of thoughts on React by the time I was done, and it took another 3000 or so to figure out what I had actually learned, and why React seemed so foreign at first, but so &lt;em&gt;right&lt;/em&gt; once I got familiar with it. It&#39;s been great learning a new thing, and even better discovering that it&#39;s a thing I can love, but there&#39;s a reason for that, and I&#39;d like to distill my close to 10k words into something that you can read, so that you might understand where React&#39;s coming from.&lt;/p&gt;
&lt;p&gt;So: if you&#39;re used to other frameworks (whether they&#39;re MVC, MVVM, some other paradigm or even just plain JS and HTML templating engines), and you feel like React is doing something very weird, don&#39;t worry: if you treat it as HTML+JS, React is really, really weird. However, the reason for it is actually you: React is not about doing things as HTML+JS, it&#39;s about writing applications using plain old object oriented programing... The objects just happen to be able to render themselves as UI elements, and the UI happens to be the browser. The logic behind what you&#39;re programming, as such, depends on knowing that you&#39;re doing OOP, and making sure you&#39;re thinking about modelling your elements and interactions based on object interactions as you would in any other OOP design setting.&lt;/p&gt;
&lt;p&gt;The bottom line: React has &lt;em&gt;almost&lt;/em&gt; nothing to do with HTML. And for a web framework, &lt;strong&gt;that&#39;s&lt;/strong&gt; weird. Although only a little, as we&#39;ll see in the rest of this post.&lt;/p&gt;
&lt;p&gt;The best way I can think of to get to business is with a table that compares the various aspects of programming to how you express those things when you&#39;re using HTML, versus how you express those things when you&#39;re using React&#39;s object model. I&#39;m calling it JSX because that&#39;s what React calls it, but really it&#39;s &quot;React&#39;s object model&quot;.&lt;/p&gt;
&lt;p&gt;So, here goes:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align:left"&gt;concepts&lt;/th&gt;
&lt;th style="text-align:center"&gt;HTML&lt;/th&gt;
&lt;th style="text-align:center"&gt;JSX&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;&quot;thing&quot; to think in terms of&lt;/td&gt;
&lt;td style="text-align:center"&gt;DOM elements&lt;/td&gt;
&lt;td style="text-align:center"&gt;components (React XML elements)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;Is this MVC?&lt;/td&gt;
&lt;td style="text-align:center"&gt;there is no explicit model&lt;/td&gt;
&lt;td style="text-align:center"&gt;components wrap MVC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;internal structure&lt;/td&gt;
&lt;td style="text-align:center"&gt;DOM tree&lt;/td&gt;
&lt;td style="text-align:center"&gt;components tree&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;scope&lt;/td&gt;
&lt;td style="text-align:center"&gt;global (&lt;code&gt;window&lt;/code&gt;)&lt;/td&gt;
&lt;td style="text-align:center"&gt;local component and &lt;code&gt;this.refs&lt;/code&gt; only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;contextual id&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;code&gt;id&lt;/code&gt; attribute&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;code&gt;ref&lt;/code&gt; attribute&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;hashcode&lt;/td&gt;
&lt;td style="text-align:center"&gt;n/a&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;code&gt;key&lt;/code&gt; attribute&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;mutable properties&lt;/td&gt;
&lt;td style="text-align:center"&gt;HTML attributes&lt;/td&gt;
&lt;td style="text-align:center"&gt;internal object properties&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;bootstrap properties&lt;/td&gt;
&lt;td style="text-align:center"&gt;n/a&lt;/td&gt;
&lt;td style="text-align:center"&gt;component &lt;code&gt;props&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;property types&lt;/td&gt;
&lt;td style="text-align:center"&gt;strings&lt;/td&gt;
&lt;td style="text-align:center"&gt;any legal JS construct&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;internal state&lt;/td&gt;
&lt;td style="text-align:center"&gt;...&lt;/td&gt;
&lt;td style="text-align:center"&gt;component &lt;code&gt;state&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;style assignment&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;code&gt;class&lt;/code&gt; attribute&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;code&gt;className&lt;/code&gt; attribute&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;hierarchy accessors&lt;/td&gt;
&lt;td style="text-align:center"&gt;DOM child/parent access&lt;/td&gt;
&lt;td style="text-align:center"&gt;local access only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;content comes from...&lt;/td&gt;
&lt;td style="text-align:center"&gt;any mix of DOM + JS&lt;/td&gt;
&lt;td style="text-align:center"&gt;purely the component state&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;content manipulation&lt;/td&gt;
&lt;td style="text-align:center"&gt;DOM API&lt;/td&gt;
&lt;td style="text-align:center"&gt;setState&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I&#39;m going to be running through each of these points in order (mostly), and I&#39;d strongly advise you not to skip to just the step &quot;you care about&quot;. Unless you gave up on the notion that you&#39;re writing a webpage rather than an object oriented application that happens to render its UI elements as inaccessible HTML, you&#39;re going to want to read all of them. In fact, humour me: even if you have, read every point anyway. They build on each other.&lt;/p&gt;
&lt;h2 id="the-thing-that-you-re-working-on"&gt;The &quot;thing&quot; that you&#39;re working on&lt;/h2&gt;
&lt;p&gt;In a traditional web setting, you have the data, the markup around that data, the styling of that markup, and the interaction logic that lets you bridge the gap between the data and the user. These things are typically your data, your HTML, your CSS and your JavaScript, respectively.&lt;/p&gt;
&lt;p&gt;That is not how you model in React. React is far more like a traditional programming language, with objects that represent your functional blocks. Each object has an initial construction configuration, a running state, and because we&#39;re working on the web, each object has a &lt;code&gt;.render()&lt;/code&gt; function that will produce a snapshot of the object, serialized into HTML that is &quot;done&quot; as far as React is concerned. Nothing you can do to it will be meaningful for the object that generated it. React could, essentially, be anything. If it rendered to native UI or to GTK or Java Swing, you&#39;d never know, since React&#39;s written in a way that everything your components might conceivably want to do is contained in your object&#39;s code.&lt;/p&gt;
&lt;p&gt;It&#39;s also much more like a traditional OOP environment in that objects don&#39;t &quot;take things from other objects&quot;. Where in HTML+JS you might do a &lt;code&gt;document.querySelector(&quot;#maincontainer div.secondary ol li.current&quot;)&lt;/code&gt; and then manipulate what comes rolling out of that, in React, you delegate. There is no &quot;global&quot; context to speak of, so you&#39;d have a Main component, containing a Secondary component, and that&#39;s all Main can see. If it wants to initiate things on &quot;the current selected list item&quot;, it tells the contained Secondary element to take care of it, without caring &lt;em&gt;how&lt;/em&gt; it takes care of it. The code for doing things lives inside the things that do the doing.&lt;/p&gt;
&lt;p&gt;This is pitfall number one if you&#39;re starting with React: &lt;strong&gt;you&#39;re not writing HTML, you&#39;re doing object oriented programming with a to-HTML-render pipeline step at the end&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="is-this-mvc-"&gt;Is this MVC?&lt;/h2&gt;
&lt;p&gt;If you think in terms of Model/View/Controller separation (and let&#39;s be clear here: that&#39;s just one of many possible ways to model data visualisation and interaction), you might be wondering if React is an MVC framework, to which the only real answer is &quot;that question has assumptions that don&#39;t really apply here&quot; (which is why comparing React to Ember or Angular or the like doesn&#39;t really make all that much sense). React is an object oriented modeling framework, whereas MVC frameworks are MVC frameworks.&lt;/p&gt;
&lt;p&gt;If we absolutely have to express React in terms of MVC: each component is responsible for housing all MVC aspects, in isolation of every other component:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the model aspect is captured as the component properties (its config) and state (it&#39;s current data),&lt;/li&gt;
&lt;li&gt;the view aspect is captured as the &lt;code&gt;render&lt;/code&gt; function, generating new views every time either the configuration or state updates, and&lt;/li&gt;
&lt;li&gt;the control aspect is covered by all the functions defined on the object that you (or React) intend to be called either through interaction with the component, or as public API, to be called by other components.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-internal-structure-of-things-"&gt;The internal structure of &quot;things&quot;&lt;/h2&gt;
&lt;p&gt;In HTML+JS, the structure of your functional blocks are just &quot;more HTML&quot;. In React, you&#39;re using a completely different thing. It&#39;s a &lt;em&gt;little&lt;/em&gt; bit different in terms of what it looks like (you should be entirely forgiven for thinking you&#39;re working with HTML except using XML syntax) but it&#39;s completely different in what it &lt;em&gt;is&lt;/em&gt;: React uses a syntax that lets you define what look like XML structures, which are transformed into key/value maps. It&#39;s these key/value maps that React uses internally as the canonical representation of your object. That&#39;s a lot of words for the summary &quot;it&#39;s not HTML, just a sort of familiar syntax to make development easy&quot;.&lt;/p&gt;
&lt;p&gt;Let&#39;s unpack that a little more: the JSX syntax uses tags that &lt;em&gt;map&lt;/em&gt; to HTML elements during the final render pipeline step. They are, however, most emphatically &lt;strong&gt;not&lt;/strong&gt; real HTML elements, and certainly not elements that end up being used in the browser. The reason here is that React uses an internal snapshot representation that lets it perform diffs between successive render calls. Each call generates a snapshot, a new snapshot is structurally compared to the previous one, and differences between them are translated into transforms that the browser can selectively apply to the snapshot&#39;s associated active DOM. It&#39;s super fast, but also means that the JSX you write has almost nothing to do with what the browser will end up using as DOM.&lt;/p&gt;
&lt;p&gt;This is pitfall number two, and really is just a rephrasing of pitfall number one: &lt;strong&gt;React objects aren&#39;t &quot;backed by HTML&quot;, nor is the browser DOM &quot;backed by a React object&quot;. What the browser shows you is just snapshots of React objects throughout their life cycle.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="html-is-unscoped-react-objects-are-scoped-as-per-oop-rules-"&gt;HTML is unscoped, React objects are scoped as per OOP rules.&lt;/h2&gt;
&lt;p&gt;Since we have no DOM, and we&#39;re doing proper OOP, React components know about their own state, and only their own state. To get around being completely isolated the normal OOP approaches apply for making components aware of things outside of their scope: they can be passed outside references during creation (i.e. these are constructor arguments; the constructor syntax just happens to look like, but conceptually is not, markup), or they can be passed in later by calling functions on the object that let you pass data in, and get data back as function return or via callbacks.&lt;/p&gt;
&lt;p&gt;Which brings us to pitfall number three: &lt;strong&gt;If you&#39;re using &lt;code&gt;window&lt;/code&gt; or some other dsignated master global context in React objects, you&#39;re probably doing something wrong.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Everything you do in React you can achieve without the need for a global context. A component should only need to care about the things it was given when it was born, and the immediately visible content it has as described in its &lt;code&gt;render()&lt;/code&gt; function. Which brings us to the next section&lt;/p&gt;
&lt;h2 id="how-do-we-find-the-right-nodes-"&gt;How do we find the right nodes?&lt;/h2&gt;
&lt;p&gt;In HTML the answer is simple: &lt;code&gt;querySelect(&quot;#all.the[things]&quot;)&lt;/code&gt;. In React the answer is equally simple, as long as we obey OOP rules: We don&#39;t know anything about &quot;higher up&quot; elements and we only know about our immediate children. That last bit is important: we should not care about our children&#39;s children in the slightest. Children are black boxes and if we need something done to our children&#39;s children, we &lt;em&gt;needSomethingDone()&lt;/em&gt;, so we call our children&#39;s API functions and trust that they do the right thing, without caring in the slightest &lt;em&gt;how&lt;/em&gt; they get them done.&lt;/p&gt;
&lt;p&gt;That&#39;s not to say you might not want to &quot;highlight the input text field when the main dialog gains focus&quot; but that&#39;s the HTML way of thinking. In React, when the dialog gains focus you want to tell all children that focus was gained, and then they can do whatever that means to them. If one of those children houses the input, then it should know to update its state to one where the input renders as highlighted. React&#39;s diffing updates will then take care of making sure it&#39;s still the same DOM element that gets highlight despite the &lt;code&gt;render()&lt;/code&gt; call outputting a &lt;em&gt;new&lt;/em&gt; snapshot.&lt;/p&gt;
&lt;p&gt;So, how do we get our own children? In HTML we can use the globally unique &lt;code&gt;id&lt;/code&gt; attribute, and the same concept but then scoped locally to React objects is the &lt;code&gt;ref&lt;/code&gt; attribute: &lt;code&gt;&lt;div ref=&quot;abcd&quot;&gt;...&lt;/div&gt;&lt;/code&gt; will let us manipulate the &lt;strong&gt;React XML element&lt;/strong&gt; that represents as &lt;code&gt;this.refs.abcd&lt;/code&gt; in our code. Again: there is no HTML. Similarly, we can select any other React XML element to work with through &lt;code&gt;this.refs&lt;/code&gt; so if we have a React element &lt;code&gt;&lt;ModalDialog ref=&quot;md&quot; /&gt;&lt;/code&gt; then we can grab it from &lt;code&gt;this.refs.md&lt;/code&gt; and call its functions so that it does what we need, such as &lt;code&gt;this.refs.md.setTitle(&quot;Enhanced modal titles are a go&quot;);&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="the-secret-sauce-in-react-s-diffing-elements-have-hashcodes-and-sometimes-that-s-on-you-"&gt;The secret sauce in React&#39;s diffing: elements have hashcodes, and sometimes that&#39;s on you.&lt;/h2&gt;
&lt;p&gt;Because React generates new XML tree snapshots every time &lt;code&gt;render()&lt;/code&gt; gets called, it needs a way to order elements reliably, for which it uses hashcodes. These are unique identifiers &lt;em&gt;local to the component they&#39;re used in&lt;/em&gt; that let React check two successive snapshots for elements with the same code, so that it can determine whether they moved around, whether any attributes changed, etc. etc.&lt;/p&gt;
&lt;p&gt;For statically defined JSX, React can add these keys automatically, but it can&#39;t do that for dynamic content. When you&#39;re creating renderable content dynamically (and the only place you&#39;ll do this is in &lt;code&gt;render()&lt;/code&gt;; if you do it anywhere else, you&#39;re doing React wrong) you need to make sure you add &lt;code&gt;key&lt;/code&gt; attributes to your JSX. And example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;render: function() {
  var list = this.state.mylist.map(function(obj) {
    return &lt;li key={obj.internalid}&gt;{obj.text}&lt;/li&gt;
  });
  return &lt;ol&gt;{list}&lt;/ol&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we don&#39;t add &lt;code&gt;key&lt;/code&gt; attributes in this JSX, React will see successive snapshots with unmarked elements, and will simply key them them based on their position. This is fairly inefficient, and can lead to situations where lists are generated without a fixed order, making React think multiple elements changed when in fact elements merely moved around. To prevent this needlessly expensive kind up updating, we explicitly add the &lt;code&gt;key&lt;/code&gt; attribute for each &lt;code&gt;obj&lt;/code&gt; in our list &lt;code&gt;mylist&lt;/code&gt; so that they&#39;re transformed into XML elements that will eventually end up being rendered as an HTML list item in the browser, while letting React see actual differences in successive snapshots.&lt;/p&gt;
&lt;p&gt;If, for instance, we remove the first element in &lt;code&gt;mylist&lt;/code&gt; because we no longer need it, none of the other elements change, but without key attributes React will see every element as having changed, because the position for each element has changed. With key attributes, it&#39;ll see that the elements merely moved and one of them disappeared.&lt;/p&gt;
&lt;p&gt;The simplest &lt;code&gt;key&lt;/code&gt; when generating content, if you know your list stays ordered, is to make it explicit that you really do just want the position that React makes use of when you forget to add keys:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;render: function() {
  var list = this.state.mylist.map(function(obj, idx) {
    return &lt;li key={idx}&gt;{obj.text}&lt;/li&gt;
  });
  return &lt;ol&gt;{list}&lt;/ol&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, while this will make React &quot;stop complaining&quot; about missing keys, this will also almost always be the &quot;wrong&quot; way to do keys, due to what React will see once you modify the list, rather than only ever appending to it. Generally, if you have dynamic content, spend a little time thinking about what can uniquely identify elements in it. Even if there&#39;s nothing you can think of, you can always use an id generator dedicated to just those elements:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;render: function() {
  var list = this.state.mylist.map(function(obj) {
    return &lt;li key={obj.key}&gt;{obj.text}&lt;/li&gt;
  });
  return &lt;ol&gt;{list}&lt;/ol&gt;;
},
generateKey: (function() {
  var id = 1;
  return function() { return id++; };
},
addEntry: function(obj) {
  obj.key = generateKey();
  this.setState({
    mylist: this.state.mylist.concat([obj])
  });
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, every time we add something that needs to go in our list, we make sure that they have a properly unique key even before the object makes it into the list. If we now modify the list in any way, the objects retain their keys and React will be able to use its optimized diffing and stay nice and fast.&lt;/p&gt;
&lt;p&gt;Before we move on, &lt;strong&gt;a warning&lt;/strong&gt;: keys uniquely identify React XML elements, which also means that if you use &lt;code&gt;key&lt;/code&gt; attributes, but some elements share the same value, React will treat these &quot;clearly different&quot; elements as &quot;the same element&quot;, and the last element in a list of same-key elements will make it into the final browser DOM. The reason here is that keys are literally JavaScript object keys,  and are used by React  to build an internal element object of the standard JavaScript kind, forming&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  key1: element,
  key2: element,
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;React runs through the elements one by one and adds key:element bindings to this object, so when it sees a second (or third, or fourth, etc) element with &lt;code&gt;key1&lt;/code&gt; as key value, then the result of React&#39;s &lt;code&gt;obj[key]=element&lt;/code&gt; is that the previously bound element simply gets clobbered.&lt;/p&gt;
&lt;p&gt;This, for instance, is a list with only a single item, no matter how many items are actually in &lt;code&gt;mylist&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;render: function() {
  var key = 1;
  var list = this.state.mylist.map(function(obj) {
    return &lt;li key={key}&gt;{obj.text}&lt;/li&gt;
  });
  return &lt;ol&gt;{list}&lt;/ol&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="mutable-properties"&gt;Mutable properties&lt;/h2&gt;
&lt;p&gt;We can be brief here: in HTML, all element attributes are mutable properties. In React, the only true mutable properties you have are the normal JavaScript object property kind of properties.&lt;/p&gt;
&lt;h2 id="immutable-properties"&gt;Immutable properties&lt;/h2&gt;
&lt;p&gt;This one&#39;s stranger, if you&#39;re used to HTML, because there aren&#39;t really any immutable properties when it comes to HTML elements.&lt;/p&gt;
&lt;p&gt;In React, however, there are two kinds of immutable properties: the construction properties and the object&#39;s internal state. The first is used to &quot;bootstrap&quot; a component, and you can think of it as the constructor arguments you pass into a creation call, or the config or options object that you pass along during construction. These values are &quot;set once, never touch&quot;. Your component uses them to set its initial state, and then after that the properties are kind of done. Except to reference the initial state (like during a reset call), they don&#39;t get used again. Instead, you constantly update the object&#39;s &quot;state&quot;. This is the collection that defines everything that makes your object uniquely that object in time. An example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ParentElement = {
  ...
  render: function() {
    var spectype = 3;
    return &lt;ChildElement name=&quot;antonius&quot; type={spectype} onClick={this.someHandler}/&gt;
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ChildElement = {
  ...
  getInitialState: function() {
    return {
      name: &#39;&#39;,
      type: -1
    };
  },
  componentDidMount: function() {
    this.setState({
      name: this.props.name,
      type: this.props.type
    });
  },
  render: function() {
    return (
      &lt;div&gt;
        &lt;span&gt;{this.state.name}&lt;/span&gt;
        (&lt;span&gt;{this.state.type}&lt;/span&gt;)
      &lt;/div&gt;
    );
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We see the child element, with an intial &quot;I have no idea what&#39;s going on&quot; state defined in the &lt;code&gt;getInitialState&lt;/code&gt; function. Once the element&#39;s been properly created and is ready to be rendered (at which point &lt;code&gt;componentDidMount&lt;/code&gt; is called) it copies its creation properties into its state, setting up its &quot;true&quot; form, and after that the role of &lt;code&gt;this.props&lt;/code&gt; is mostly over. Rendering relies on tapping into &lt;code&gt;this.state&lt;/code&gt; to get the to-actually-show values, and we can modify the element&#39;s state through its lifecycle by using the &lt;code&gt;setState()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ChildElement = {
  ...
  render: function() {
    return &lt;div onClick={this.rename}&gt;{this.state.name}&lt;/div&gt;;
  },
  rename: function(event) {
    var newname = prompt(&quot;Please enter a new name&quot;);
    this.setState({ name: newname });
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The chain of events here is: &lt;code&gt;render()&lt;/code&gt; -&gt; the user clicks on the name -&gt; &lt;code&gt;rename()&lt;/code&gt; is called, which prompts for a new name -&gt; the element&#39;s state is updated so that &lt;code&gt;name&lt;/code&gt; is this new name -&gt; &lt;code&gt;render()&lt;/code&gt; is called because the element&#39;s state was updated -&gt; React compared the new render output to the old output and sees a string diff in the &lt;code&gt;&lt;div&gt;&lt;/code&gt; XML element -&gt; React causes the browser to update the mapped HTML element so we see the new name.&lt;/p&gt;
&lt;h2 id="what-can-i-pass-as-property-values-"&gt;What can I pass as property values?&lt;/h2&gt;
&lt;p&gt;In HTML the answer is &quot;strings&quot; - it doesn&#39;t matter what you pass in, if you use it as HTML attribute content, it becomes a string.&lt;/p&gt;
&lt;p&gt;In React, the answer is &quot;everything&quot;. If you pass in a number, it stays a number. If you pass in a string, it stays a string. But, more importantly, if you pass in an object or function reference, &lt;strong&gt;it stays an object or function reference&lt;/strong&gt; and that&#39;s how owning elements can set up meaningful deep bindings with child or even descendant elements.&lt;/p&gt;
&lt;h2 id="if-there-is-no-html-how-do-i-style-my-stuff-"&gt;If there is no HTML, how do I style my stuff??&lt;/h2&gt;
&lt;p&gt;React elements can use the &lt;code&gt;className&lt;/code&gt; property so that you can use regular CSS styling on them. Anything passed into the &lt;code&gt;className&lt;/code&gt; property gets transformed to the HTML &lt;code&gt;class&lt;/code&gt; attribute at the final step of rendering.&lt;/p&gt;
&lt;h2 id="what-if-i-need-id-s-"&gt;What if I need &lt;code&gt;id&lt;/code&gt;s?&lt;/h2&gt;
&lt;p&gt;You don&#39;t. Even if you have a single element that will always be the only single instance of that React object, ever, you could still be wrong. &lt;code&gt;id&lt;/code&gt; attributes cannot be guaranteed in an environment where every component only knows about itself, and its immediate children. There is no global scope, so setting a global scope identifier makes absolutely no sense.&lt;/p&gt;
&lt;h2 id="but-what-if-i-need-to-tie-functionality-to-what-i-need-an-id-on-element-"&gt;But what if I need to tie functionality to what-I-need-an-id-on element?&lt;/h2&gt;
&lt;p&gt;Add it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Element = {
  ...
  render: function() {
    return &lt;div className=&quot;top-level-element&quot;&gt;........&lt;/div&gt;;
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;surprise: you can querySelect your way to this element just fine with a &lt;code&gt;.top-level-element&lt;/code&gt; query selector.&lt;/p&gt;
&lt;h2 id="but-that-s-slower-than-ids-"&gt;But that&#39;s slower than ids!&lt;/h2&gt;
&lt;p&gt;Not in modern browsers, no. Let&#39;s move on.&lt;/p&gt;
&lt;h2 id="how-do-i-access-elements-hierarchically-"&gt;How do I access elements hierarchically?&lt;/h2&gt;
&lt;p&gt;As should be obvious by now, we don&#39;t have querySelector available, but we do have a full OOP environment at our fingertips, so the answer is &lt;strong&gt;delegate&lt;/strong&gt;. If you need something done to a descendant, tell your child between you and that descendant to &quot;make it happen&quot; and rely on their API function to do the right thing. How things are done are controlled by the things that do the actual doing, but that doesn&#39;t mean they can&#39;t offer an API that can be reached: &lt;code&gt;X:Y.doIt()&lt;/code&gt; -&gt; &lt;code&gt;Y.doIt() { this.refs.Z.doIt(); }&lt;/code&gt; -&gt; &lt;code&gt;Z.doIt() { this.refs.actualthing.doIt(); }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Similarly, if you need parents to do things, then you need to make sure those parents construct the element with a knowledge of what to call:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ParentElement = {
  ...
  render: function() {
    return &lt;ChildElement doit={this.doit}/&gt;
  },
  doit: function() {
    ...
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ChildElement = {
  ...
  render: function() {
    return &lt;div onClick={this.props.doit}&gt;do it&lt;/div&gt;;
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id="what-else-is-there-"&gt;What else is there?&lt;/h1&gt;
&lt;p&gt;This kind of covers everything in a way that hopefully makes you realise that React is a proper object oriented programming approach to page and app modelling, and that it has almost nothing to do with HTML. Its ultimate goal of course is to generate HTML that the browser knows how to show and work with, but that view and React&#39;s operations are extremely loosely coupled, and mostly works as a destructive rendering of the object: the DOM that you see rendered in the browser and the React objects that lead to that DOM are not tied together except with extremely opaque React hooks that you have no business with.&lt;/p&gt;
&lt;p&gt;More posts will follow because this is hardly an exhausted topic, but in the mean time: treating React as a proper OOP environment actually makes it a delight to work with. Treating it as an HTML framework is going to leave you fighting it for control nonstop.&lt;/p&gt;
&lt;p&gt;So remember:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;you’re not writing HTML, you’re doing object oriented programming with a to-HTML-render pipeline step at the end.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;React objects aren’t “backed by HTML”, nor is the browser DOM “backed by a React object”. What the browser shows you is just snapshots of React objects throughout their life cycle.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Your objects have creation properties, but you should always render off of the &quot;current state&quot;. If you need to copy those properties into your state right after creation, do. Then forget they&#39;re even there.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The best way I can think of to get to business is with a table that compares the various aspects of programming to how you express those things when you&#39;re using HTML, versus how you express those things when you&#39;re using React&#39;s object model. I&#39;m calling it JSX because that&#39;s what React refers to it, but really it&#39;s &quot;React&#39;s object model&quot;.&lt;/p&gt;
</description>
<category>Mozilla</category>
<category>React</category>
<category>HTML</category>
<category>OOP</category>
<link>http://pomax.github.io/gh-blog/#gh-weblog-1419289380022</link>
<guid>http://pomax.github.io/gh-blog/#gh-weblog-1419289380022</guid>
<pubDate>Mon, 22 Dec 2014 23:03:00 GMT</pubDate>
</item>
<item>
<title>Let's make a Firefox Extension, the painless way</title>
<description>&lt;h1 id="let-s-make-a-firefox-extension-the-painless-way"&gt;Let&#39;s make a Firefox Extension, the painless way&lt;/h1&gt;
&lt;p&gt;Ever had a thing you really wanted to customise about &lt;a href="http://firefox.com"&gt;Firefox&lt;/a&gt;, but you couldn&#39;t because it wasn&#39;t in any regular menu, advanced menu, or &lt;a href="http://kb.mozillazine.org/Firefox_:_FAQs_:_About:config_Entries"&gt;about:config&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;For instance, you want to be able to delete elements on a page for peace of mind from the context menu. How the heck do you do that? Well, with the publication of the new node-based &lt;a href="https://www.npmjs.com/package/jpm"&gt;jpm&lt;/a&gt;, the answer to that question is &quot;pretty dang simply&quot;...&lt;/p&gt;
&lt;p&gt;Let&#39;s make our own Firefox extension with a &quot;Delete element&quot; option added to the context menu:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/duBHYhj.png" alt="a screenshot of the Firefox page context menu with a &#39;delete element&#39; option"&gt;&lt;/p&gt;
&lt;p&gt;We&#39;re going to make that happen in five steps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install jpm -- in your terminal simply run: &lt;code&gt;npm install -g jpm&lt;/code&gt; (make sure you have &lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt; installed) and done (this is mostly prerequisite to developing an extension, so you only have to do this once, and then never again. For future extensions, you start at step 2!)&lt;/li&gt;
&lt;li&gt;Create a dir for working on your extension whereveryou like, navigate to it in the terminal and run: &lt;code&gt;jpm init&lt;/code&gt; to set up the standard files necessary to build your extension. Good news: it&#39;s very few files!&lt;/li&gt;
&lt;li&gt;Edit the &lt;code&gt;index.js&lt;/code&gt; file that command generated, writing whatever code you need to do what you want to get done,&lt;/li&gt;
&lt;li&gt;Turn your code into an &lt;code&gt;.xpi&lt;/code&gt; extension by running : &lt;code&gt;jpm xpi&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Install the extension by opening the generated &lt;code&gt;.xpi&lt;/code&gt; file with Firefox&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, step (3) is the part that requires some effort, but let&#39;s run through this together. We&#39;re going to pretty much copy/paste the code straight from the &lt;a href="https://developer.mozilla.org/en-US/Add-ons/SDK/Tutorials/Add_a_Context_Menu_Item"&gt;context menu API&lt;/a&gt; documentation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    // we need to make sure we have a hook into &quot;things&quot; we click on:
1:  var self = require(&quot;sdk/self&quot;);

    // and we&#39;ll be using the context menu, so let&#39;s make sure we can:
2:  var contextMenu = require(&quot;sdk/context-menu&quot;);

    // let&#39;s add a menu item!
3:  var menuItem = contextMenu.Item({
      // the label is pretty obvious...
4:    label: &quot;Delete Element&quot;,

      // the context tells Firefox which things should have this in their context
      // menu, as there are quite a few elements that get &quot;their own&quot; menu,
      // like &quot;the page&quot; vs &quot;an image&quot; vs &quot;a link&quot;. .. We pretty much want
      // everything on a page, so we make that happen:
5:    context: contextMenu.PredicateContext(function(data) { return true; }),

      // and finally the script that runs when we select the option. Delete!
6:    contentScript: &#39;self.on(&quot;click&quot;, function (node, data) { node.outerHTML = &quot;&quot;; });&#39;
    });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The only changes here are that we want &quot;delete&quot; for everything, so the context is simply &quot;for anything that the context menu opens up on, consider that a valid context for our custom script&quot; (which we do by using the &lt;a href="https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/context-menu#PredicateContext%28predicateFunction%29"&gt;widest context possible&lt;/a&gt; on line 5), and of course the script itself is different because we want to delete nodes (line 6).&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/context-menu#In_content_scripts"&gt;contentScript&lt;/a&gt; property is a string, so we&#39;re a little restricted in what we can do without all manner of fancy postMessages, but thankfully we don&#39;t need it: the addon mechanism will always call the contentScript function with two arguments, &quot;node&quot; and &quot;data, and the &quot;node&quot; argument is simply the HTML element you clicked on, which is what we want to delete. So we do! We don&#39;t even try to be clever here, we simply set the element&#39;s &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/element.outerHTML"&gt;.outerHTML&lt;/a&gt; property to an empty string, and that makes it vanish from the page.&lt;/p&gt;
&lt;p&gt;If you expected more work, then good news: there isn&#39;t any, we&#39;re already done! Seriously: run &lt;code&gt;jpm run&lt;/code&gt; yourself to test your extension, and after verifying that it indeed gives you the new &quot;Delete element&quot; option in the context menu and deletes nodes when used, move on to steps (4) and (5) for the ultimate control of your browser.&lt;/p&gt;
&lt;p&gt;Because here&#39;s the most important part: the freedom to control your online experience, and Firefox, go hand in hand.&lt;/p&gt;
</description>
<category>Mozilla</category>
<category>Firefox</category>
<category>JPM</category>
<category>Extensions</category>
<category>Addons</category>
<link>http://pomax.github.io/gh-blog/#gh-weblog-1418833974687</link>
<guid>http://pomax.github.io/gh-blog/#gh-weblog-1418833974687</guid>
<pubDate>Wed, 17 Dec 2014 16:32:54 GMT</pubDate>
</item>
<item>
<title>I Blame Mike H.</title>
<description>&lt;h1 id="i-blame-mike-h-"&gt;I Blame Mike H.&lt;/h1&gt;
&lt;p&gt;Sometimes you see &lt;a href="https://twitter.com/mikeaich/status/544976045313503232"&gt;a tweet&lt;/a&gt; that points to &lt;a href="http://wtfjs.com/2013/02/12/obfuscated-fibonacci"&gt;a post&lt;/a&gt; and you leave what is the comment equivalent of a wink, but then things spiral out of control...&lt;/p&gt;
&lt;p&gt;What does an obfuscated &lt;a href="http://en.wikipedia.org/wiki/Lucas_number"&gt;Lucas series&lt;/a&gt; generator look like? (Note: not &lt;a href="http://en.wikipedia.org/wiki/Lucas_sequence"&gt;Lucas sequence&lt;/a&gt;, because that&#39;s a very different thing).&lt;/p&gt;
&lt;p&gt;To answer this, a quick bit of nifty: you know the Fibonacci series. Even if you don&#39;t, it takes almost no time to explain: it starts as 1, 1 and then the next term is the sum of the previous two, so it goes 1, 1, then 2 (1+1), then 3 (2+1), then 5 (3+2), 8 (5+3), and so forth. The Lucas series starts with 2,1 instead, so we get 2, 1, 3, 4, 7, 11, 18, 29, and so forth.&lt;/p&gt;
&lt;p&gt;Now, any series like this (doesn&#39;t matter which 2 numbers you start with) ends up with a &quot;&lt;a href="http://en.wikipedia.org/wiki/Golden_ratio"&gt;golden ratio&lt;/a&gt;&quot; between any number &lt;code&gt;n&lt;/code&gt; and the previous number &lt;code&gt;n-1&lt;/code&gt;, in that &lt;code&gt;f(n)/f(n-1)&lt;/code&gt; tends to the golden ratio value, the higher &lt;code&gt;n&lt;/code&gt; gets. For the Fibonacci series, the fun ends there.&lt;/p&gt;
&lt;p&gt;BUT!&lt;/p&gt;
&lt;p&gt;The Lucas series is really cool. Let&#39;s call the golden ratio φ, and the number in the Lucas series simply &quot;lucas(...). Then : lucas(1) = 2, lucas(2) = 1, lucas(3) = 3, lucas(4) = 4, lucas(5) = 7, lucas(6) = 11, etc. But now check this out: φ&lt;sup&gt;1&lt;/sup&gt; ≈ 1.618, φ&lt;sup&gt;2&lt;/sup&gt; ≈ 2.618,  φ&lt;sup&gt;3&lt;/sup&gt; ≈ 4.236, φ&lt;sup&gt;4&lt;/sup&gt; ≈ 6.854, φ&lt;sup&gt;5&lt;/sup&gt; ≈ 11.090,  φ&lt;sup&gt;6&lt;/sup&gt; ≈ 17.944, φ&lt;sup&gt;7&lt;/sup&gt; ≈ 29.034, etc.&lt;/p&gt;
&lt;p&gt;Notice anything? What if we round those ratio powers?&lt;/p&gt;
&lt;p&gt;φ&lt;sup&gt;1&lt;/sup&gt; ≈ 2, φ&lt;sup&gt;2&lt;/sup&gt; ≈ 3,  φ&lt;sup&gt;3&lt;/sup&gt; ≈ 4, φ&lt;sup&gt;4&lt;/sup&gt; ≈ 7, φ&lt;sup&gt;5&lt;/sup&gt; ≈ 11, φ&lt;sup&gt;6&lt;/sup&gt; ≈ 18, φ&lt;sup&gt;7&lt;/sup&gt; ≈ 29, etc.&lt;/p&gt;
&lt;p&gt;We see that lucas(n) is equivalent to φ&lt;sup&gt;n-1&lt;/sup&gt;, if we round the latter. This isn&#39;t just for the first few terms, either, this holds true for &lt;em&gt;every&lt;/em&gt; lucas number. That&#39;s amazing! It&#39;s so amazing that there&#39;s a &lt;a href="https://www.youtube.com/watch?v=PeUbRXnbmms"&gt;numberphile youtube video about it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Okay, so let&#39;s figure out the obfuscation. In Javascript &lt;code&gt;+[]&lt;/code&gt; is the number 0, because JS will see a &lt;code&gt;+&lt;/code&gt; and try to interpret what follows as a number. Normally &lt;code&gt;[]&lt;/code&gt; is an empty array, but due to some very interesting rules, an empty array can be coerced to the number zero if absolutely necessary, so JS will do this for us. We can get the number 1 in a variety of ways, but the one used in Mike&#39;s tweet is &lt;code&gt;++[+[]][+[]]&lt;/code&gt;, which is equivalent to &lt;code&gt;++[0][0]&lt;/code&gt;. You might understand this immediately if I said &lt;code&gt;var array = [0]; ++array[0];&lt;/code&gt;, because that&#39;s obviously going to give 1. Clever.&lt;/p&gt;
&lt;p&gt;Now then, let&#39;s get cracking! First off, let&#39;s generate the golden ratio in minimal JS. One of the interesting things about the golden ratio is that you can write it as an infinitely &lt;a href="http://en.wikipedia.org/wiki/Continued_fraction"&gt;continued fraction&lt;/a&gt; involving only the number 1: it&#39;s 1, plus 1/... where the ... is 1 + 1/..., in which &lt;em&gt;that&lt;/em&gt; ... is 1 + 1/... in which &lt;strong&gt;that&lt;/strong&gt; ... is 1 + 1/... in whi-- well you get the idea.&lt;/p&gt;
&lt;p&gt;If we do that in reverse, we can build the golden ratio by starting with some &lt;code&gt;r = 1&lt;/code&gt; and then running &lt;code&gt;r = 1 + 1/r&lt;/code&gt; a large number of times. This&#39;ll generate the series 1, 2, 1.5, 1.666..., 1.6, 1.625, 1.615384, ..., 1.6180371352785146, ..., 1.6180339631667064, and if we run it long enough, something starting with 1.618033988749895, in which those 16 significant digits don&#39;t change. That&#39;s good enough for me.&lt;/p&gt;
&lt;p&gt;In fact, I&#39;ll settle for 1.618033988749989, which is what you get if we run that &lt;code&gt;r = 1 + 1/r&lt;/code&gt; 32 times.&lt;/p&gt;
&lt;p&gt;Let&#39;s Javascriptify:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(r = 1, s = 32; s&gt;0; r = 1 + 1/r, s--); r
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Good start. Rewriting time:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(r = ++[+[]][+[]], s = 32; s&gt;+[]; r = ++[+[]][+[]] + (++[+[]][+[]]/r), s--); r
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now for that s... I picked 32 for a reason, because if we use some bit shifting, it&#39;s 1 &lt;&lt; 6, or 2 &lt;&lt; 2 &lt;&lt; 2, and 2 is pretty easy to get when we already have &lt;code&gt;r = 1&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;r = ++[+[]][+[]];
s = ++[r][+[]]&lt;&lt;++[r][+[]]&lt;&lt;++[r][+[]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Splendid, we now have &lt;code&gt;r=1&lt;/code&gt; and &lt;code&gt;s=32&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(r = ++[+[]][+[]], s = ++[r][+[]]&lt;&lt;++[r][+[]]&lt;&lt;++[r][+[]]; s&gt;+[]; r = ++[+[]][+[]] + (++[+[]][+[]]/r),
 s--); r
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Still too readable though, let&#39;s replace &lt;code&gt;r&lt;/code&gt; with &lt;code&gt;_&lt;/code&gt; and &lt;code&gt;s&lt;/code&gt; with &lt;code&gt;__&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(_=++[+[]][+[]],__=++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;++[_][+[]];__&gt;+[];_=++[+[]][+[]]+(++[+[]][+[]]/_),__--);_
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nice. In fact, let&#39;s increase our accuracy just a little bit more with one more shift:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(_=++[+[]][+[]],__=++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;_;__&gt;+[];_=++[+[]][+[]]+(++[+[]][+[]]/_), __--);_
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And now we get 1.618033988749895 when we run this. Golden ratio found!&lt;/p&gt;
&lt;p&gt;Now for the Lucas numbers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function lucas(n) {
  for(_=++[+[]][+[]],__=++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;_;__&gt;+[];_=++[+[]][+[]]+(++[+[]][+[]]/_), __--);
  return Math.round(Math.pow(_, n-1));
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But of course that&#39;s again way too readable. Let&#39;s drop those Math.functions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function lucas(n) {
  for(_=++[+[]][+[]],__=++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;_;__&gt;+[];_=++[+[]][+[]]+(++[+[]][+[]]/_), __--);
  return (0.5 + Math.pow(_, n-1)) | 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A little better: Javascript can be tricked into floor-rounding by using any bit operation, so &lt;code&gt;6.34 | 0&lt;/code&gt; becomes 6, as does &lt;code&gt;6.34 &lt;&lt; 0&lt;/code&gt; (shift by 0 bits) or &lt;code&gt;6.34 &gt;&gt; 0&lt;/code&gt; (also shift, opposite direction). If instead of floor rounding we want normal rounding, we have to add 0.5 first. But we only have integers in our obfuscated code, so we use 1 divided by 2:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function lucas(n) {
  for(_=++[+[]][+[]],__=++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;_;__&gt;+[];_=++[+[]][+[]]+(++[+[]][+[]]/_), __--);
  return (1/2 + Math.pow(_, n-1)) | 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&#39;s get obfuscating&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function lucas(n) {
  for(_=++[+[]][+[]],__=++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;_;__&gt;+[];_=++[+[]][+[]]+(++[+[]][+[]]/_),__--);
  return (++[+[]][+[]]/++[++[+[]][+[]]][+[]] + Math.pow(_, n-1)) | 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sweet. We get 2 from exploiting the trick we used for 1: ++[0][0] is one, ++[1][0] is two, ++[2][0] is three, etc... but now to get rid of Math.pow: as you&#39;ll recall from basic arithmetic, a&lt;sup&gt;b&lt;/sup&gt; is just &lt;code&gt;a*a*...*a&lt;/code&gt; with &lt;code&gt;b-1&lt;/code&gt; multiplications, so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(var temp = a, b = ...; --b&gt;0; a *= temp); a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Easy enough:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function lucas(n) {
  for(_=++[+[]][+[]],__=++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;_;__&gt;+[];_=++[+[]][+[]]+(++[+[]][+[]]/_),__--);
  for(var temp = _, b = n-1; --b&gt;0; _ *= temp);
  return (++[+[]][+[]]/++[++[+[]][+[]]][+[]] + _) | 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But let&#39;s get rid of that &lt;code&gt;b&lt;/code&gt;, too, since we already have &lt;code&gt;n&lt;/code&gt; and it doesn&#39;t matter what happens to it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function lucas(n) {
  for(_=++[+[]][+[]],__=++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;_;__&gt;+[];_=++[+[]][+[]]+(++[+[]][+[]]/_),__--);
  for(var temp = _; --n+1&gt;0; _ *= temp);
  return (++[+[]][+[]]/++[++[+[]][+[]]][+[]] + _) | 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nice! One last trick we can use is that in Javascript &lt;code&gt;if (... !== 0)&lt;/code&gt; can be shortcircuited by exploiting the fact that JS will try to turn something into a conditional if it isn&#39;t one, so we can say &lt;code&gt;if (...)&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function lucas(n) {
  for(_=++[+[]][+[]],__=++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;_;__&gt;+[];_=++[+[]][+[]]+(++[+[]][+[]]/_),__--);
  for(var temp = _; --n+1; _ *= temp);
  return (++[+[]][+[]]/++[++[+[]][+[]]][+[]] + _) | 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, we can use &lt;code&gt;__&lt;/code&gt; as our temp var, since we won&#39;t need it anymore, and we&#39;re pretty much done:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function lucas(n) {
  for(_=++[+[]][+[]],__=++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;_;__&gt;+[];_=++[+[]][+[]]+(++[+[]][+[]]/_),__--);
  for(__=_;-++[+[]][+[]]+n--;_*=__);
  return (++[+[]][+[]]/++[++[+[]][+[]]][+[]] + _) | 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And as  whitespace isn&#39;t semantic, let&#39;s remove all of that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function l(n){for(_=++[+[]][+[]],__=++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;_;__&gt;+[];_=++[+[]][+[]]+
(++[+[]][+[]]/_),__--);for(__=_;-++[+[]][+[]]+--n;_*=__);return(++[+[]][+[]]/++[++[+[]][+[]]][+[]]+_)|+[];}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Done! If we call this as &lt;code&gt;l(1)&lt;/code&gt; we&#39;ll get stuck in an infinite loop, but that&#39;s okay, as we can only start generating as of the 3rd Lucas number anyway. If we do, &lt;code&gt;l(3)&lt;/code&gt; is 3, &lt;code&gt;l(4)&lt;/code&gt; is 4, &lt;code&gt;l(5)&lt;/code&gt; is 7, &lt;code&gt;l(6)&lt;/code&gt; is 11, and so on.&lt;/p&gt;
&lt;p&gt;Thanks for letting me waste your time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;: You might have spotted an &quot;optimisation&quot; here, because &lt;code&gt;__&lt;/code&gt; is 1.[something], so &lt;code&gt;__|0&lt;/code&gt; is 1. We can use this in our return statement to further compact while staying utterly unreadable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function l(n){for(_=++[+[]][+[]],__=++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;++[_][+[]]&lt;&lt;_;__&gt;+[];_=++[+[]][+[]]+
(++[+[]][+[]]/_),__--);for(__=_;-++[+[]][+[]]+--n;_*=__);return(__|0/++[__|0][+[]]+_)|+[];}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We could also use &lt;code&gt;__|0/(__|0)&lt;&lt;__|0&lt;/code&gt; but that&#39;s actually far more readable, so let&#39;s not.&lt;/p&gt;
</description>
<category>Maths</category>
<category>JavaScript</category>
<category>Fibonacci</category>
<category>Lucas</category>
<link>http://pomax.github.io/gh-blog/#gh-weblog-1419794486361</link>
<guid>http://pomax.github.io/gh-blog/#gh-weblog-1419794486361</guid>
<pubDate>Sun, 28 Dec 2014 19:21:26 GMT</pubDate>
</item>
<item>
<title>Appmaking at MozFest 2014</title>
<description>&lt;h1 id="appmaking-at-mozfest-2014"&gt;Appmaking at MozFest 2014&lt;/h1&gt;
&lt;p&gt;Two weeks ago we hosted &lt;a href="http://2014.mozillafestival.org"&gt;MozFest 2014&lt;/a&gt; in London (UK, not Ontario), with lots of &lt;a href="http://apps.webmaker.org"&gt;appmaker&lt;/a&gt; related sessions, including a weekend long &quot;introduction to appmaker&quot; that I ran with the help of the wonderful &lt;a href="https://twitter.com/McBeckster"&gt;Becky Weir&lt;/a&gt;, and it was great to see people going from &quot;I have no idea what this is&quot; to &quot;I am remixing apps for giggles&quot; and &quot;I have an idea for an app, let me try to make it&quot;.  MozFest 2014 was the first big event that had the current version of Appmaker in the hands of the public, so it was a good time to see what worked, and what didn&#39;t.&lt;/p&gt;
&lt;h3 id="what-worked"&gt;What worked&lt;/h3&gt;
&lt;p&gt;It&#39;s easy to imagine that it&#39;s important to have some fun components as well as some tedious logics components for apps while you&#39;re developing software like this, but it&#39;s not until you ask people to play with it that you realise exactly &lt;em&gt;how&lt;/em&gt; important it is to have fun components. A few weeks before MozFest, &lt;a href="http://scottdowne.wordpress.com"&gt;Scott Downe&lt;/a&gt; had made a simple top-down 2d game level brick, as well as a retro-looking game controller brick, and while those were fun to play with, it wasn&#39;t until he and Becky &lt;a href="https://scott.makes.org/thimble/LTE4NzA1MjgyNTY=/mozfest-appmaker-games"&gt;wrote some tutorials on how to use them&lt;/a&gt; that it was obvious exactly how important these bricks were - they literally made appmaker a fun thing to play with, and without them I have no doubt in my mind that Appmaker would have been received far less positively.&lt;/p&gt;
&lt;p&gt;During the MozFest weekend the fact that if a tool can&#39;t let you have fun, people aren&#39;t going to want to use it, was so much more obvious than you get testing it with people in an office, or with people who&#39;ve heard you talk about it before. If someone has never seen your tool before, and within minutes can have fun, that&#39;s a tool they want to come back to later.&lt;/p&gt;
&lt;h3 id="what-didn-t-work"&gt;What didn&#39;t work&lt;/h3&gt;
&lt;p&gt;We&#39;re missing essential functionality of which we either didn&#39;t know it was essential, or didn&#39;t think was as essential as it turned out to be. So, a list of sorts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We&#39;re missing components to do things that people care about: accessing online APIs, parsing that data, and plotting that data/routing it on to more user-engaging components. In fact, it turns out this is so essential that during the closing demos party, there was a version of appmaker being shown that had these things hacked in, in order to show off an app that showed weather and atmospheric data, plotted over time. That&#39;s really cool! And that should have been a thing that was already possible rather than requiring a fork with hacks.&lt;/li&gt;
&lt;li&gt;We&#39;re missing the functionality for people to make their own component, and link that into their app. This is something that we actually used to have, but we had to disable quite a while ago due to complexities, and did not maintain while we rewrote Appmaker&#39;s core functionality. Especially given the missing components in the previous point, this one&#39;s plain annoying.&lt;/li&gt;
&lt;li&gt;As a web technology, and this one&#39;s really interesting, we&#39;re missing an import function, where we say &quot;my app actually lives over on &lt;a href="http://someplace/app.html"&gt;http://someplace/app.html&lt;/a&gt;&quot; and have Appmaker load that app into the designer for editing. Even a &quot;paste in your code&quot; function so that people who&#39;ve been working in a local copy of Appmaker would have made a different given that internet can be spotty, and running a login-less, database-less local copy of appmaker is really easy.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course there were also the usual bugs that only come out during massive testing, such as the fact that a component we thought we&#39;d removed still being listed, or a not-often-used component not behaving properly, which is always great to discover, if a little embarassing!&lt;/p&gt;
&lt;h3 id="what-s-next-"&gt;What&#39;s next?&lt;/h3&gt;
&lt;p&gt;One of the major activities on Appmaker following MozFest is clean-up. In the runup to MozFest, as well as over the past few months overhauling parts of the codebase, we&#39;ve had a fair bit of build-up of dead code, unclean code, and of course, hacks to make things work &quot;well enough&quot; rather than &quot;properly&quot;. It&#39;s time to address those issues, while also spending some time on working on the issues that surfaced during MozFest, to add essential components, and crucially: make real apps and document the process as learning kits, because if there are no recipes to follow, exploring a complex tool is not fun; it&#39;s a chore. There&#39;s also some technical debt that we need to repay in the form of hacks we did on the technologies that underpin Appmaker, which should be rewritten as proper patches and submitted as patch requests to the relevant projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tl;dr: add essential components, custom components, and tutorials, tutorials, tutorials.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="the-take-home-message"&gt;The take-home message&lt;/h2&gt;
&lt;p&gt;People really liked Appmaker, and that&#39;s great! They also had expectations that we didn&#39;t or couldn&#39;t meet, and that&#39;s not great from a &quot;result&quot; perspective, but &lt;em&gt;is&lt;/em&gt; great from a &quot;learning what people want&quot; perspective. Also, and really once again, it&#39;s been made clear that tools that can&#39;t let you have fun aren&#39;t worth spending time on, and Appmaker can certainly do with more fun. That doesn&#39;t necessarily mean Appmaker itself needs to be made more fun, but we need more components and, crucially, good tutorials, on how to have fun in Appmaker by making something that&#39;s not just a cut and dry purpose-built app, but something you can keep playing with after you made it.&lt;/p&gt;
&lt;p&gt;If you were at MozFest 2014, or you have an interest in Appmaker and helping us improve it, you can find us in the #appmaker IRC channel on irc.mozilla.org (if you like real-time interacting) or on github over at &lt;a href="https://github.com/mozilla-appmaker/appmaker"&gt;github.com/mozilla-appmaker/appmaker&lt;/a&gt; if you prefer the more ticket-based communication. With everyone slowly returning to work after post-MozFest vacations (a yearly tradition!) I&#39;m looking forward to making Appmaker leaner, faster, and more what you want, based on what you&#39;ve told us!&lt;/p&gt;
</description>
<category>Webmaker</category>
<category>Appmaker</category>
<category>Mozilla</category>
<category>MozFest</category>
<link>http://pomax.github.io/gh-blog/#gh-weblog-1415815317842</link>
<guid>http://pomax.github.io/gh-blog/#gh-weblog-1415815317842</guid>
<pubDate>Wed, 12 Nov 2014 18:01:57 GMT</pubDate>
</item>
<item>
<title>A quick ink update</title>
<description>&lt;h1 id="a-quick-ink-update"&gt;A quick ink update&lt;/h1&gt;
&lt;p&gt;Updating &lt;a href="http://inkcyclopedia.org"&gt;inkcyclopedia&lt;/a&gt; with some more inks to fill in the gaps (oh yes.. there are gaps...) so I&#39;ve added some loose ends (like ink lines of which I had most-except-4-to-7) which is &lt;a href="http://imgur.com"&gt;imgur&lt;/a&gt; album&#39;d &lt;a href="http://imgur.com/gallery/7rXCP"&gt;here&lt;/a&gt;, and there will be a few larger batches added when I have time. I have an additional 70 de Atramentis inks sitting on the table waiting for when I have time to pen them up, after that it&#39;s probably just going to be the remaining Diamine and Noodler&#39;s Inks and then there&#39;ll be a stupid amount of inks on the site and it&#39;s utility will come from being useful when selecting inks. Meaning I need to get on those improvements for viewing samples and getting stats about the inks (composition, flowiness, feathering, shading, wetness,  etc. etc. etc).&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/zHUSlaT.jpg" class="border" style="width: 50%; margin: 1em; margin-left: 25%;"&gt;&lt;/p&gt;
</description>
<category>Inkcyclopedia</category>
<category>Fountain</category>
<category>Pen</category>
<category>Ink</category>
<link>http://pomax.github.io/gh-blog/#gh-weblog-1412703241308</link>
<guid>http://pomax.github.io/gh-blog/#gh-weblog-1412703241308</guid>
<pubDate>Tue, 07 Oct 2014 17:34:01 GMT</pubDate>
</item>
<item>
<title>Bezier.js, for doing bezier curve things</title>
<description>&lt;h1 id="bezier-js-for-doing-bezier-curve-things"&gt;Bezier.js, for doing bezier curve things&lt;/h1&gt;
&lt;p&gt;I was asked if I would be willing to write an SVG path-to-outline conversion library, and figured I might as well set up some jump boards for doing that. One of those is &lt;a href="http://pomax.github.io/bezierjs"&gt;Bezier.js&lt;/a&gt; which I &quot;released&quot; today (meaning it has working code and a demo, but no registered npm/bower entries yet).&lt;/p&gt;
&lt;p&gt;It&#39;s a small bezier curve library that does the essential things like generating plot points, derivatives, normals, inflection points, curve offsetting, etc. Give the demo a try, and read through &lt;a href="https://github.com/Pomax/bezierjs/blob/gh-pages/beziertest.js"&gt;the example code&lt;/a&gt;. It&#39;s pretty easy!&lt;/p&gt;
</description>
<category>Bezier</category>
<category>Curves</category>
<category>Maths</category>
<link>http://pomax.github.io/gh-blog/#gh-weblog-1412572015743</link>
<guid>http://pomax.github.io/gh-blog/#gh-weblog-1412572015743</guid>
<pubDate>Mon, 06 Oct 2014 05:06:55 GMT</pubDate>
</item>
<item>
<title>Let's simplify installations.</title>
<description>&lt;h1 id="let-s-simplify-installations-"&gt;Let&#39;s simplify installations.&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://webmaker.org"&gt;Webmaker&lt;/a&gt; is a collection of tools that are awesome. Getting them all up and running at the same time, however, is somewhat the opposite of that qualifier, so in order to make the process easier, about a year ago, I wrote the &quot;webmaker suite&quot; - a set of scripts that could do things like install all our apps, update them, and run them.&lt;/p&gt;
&lt;p&gt;That sounds pretty useful, and it was, but it was also a lot of &quot;scripts&quot;. It was certainly friendlier than telling someone to clone ten apps themselves and do the whole npm install thing, but it was a lot of runtime flags to make sure only the right things would start up or install or update, and I finally had enough.&lt;/p&gt;
&lt;p&gt;Programmers do their best work on things that scratch an itch, and I just got a new work laptop, which needed webmaker-suite installed. I was not happy. Why didn&#39;t we just have a package manager, really, so I could just say &quot;grab me X, Y, and Z, and let me run them&quot;? Well, pretty much because I never wrote it. How dare I be so lazy!&lt;/p&gt;
&lt;p&gt;So I took a day to just implement a package manager for webmaker and in the process ended up writing a pretty sweet retro menu system program package .. thing... for node.js that you can find &lt;a href="http://github.com/Pomax/terminal-menu-program"&gt;here&lt;/a&gt; (based on the already existing &lt;a href="https://www.npmjs.org/package/terminal-menu"&gt;terminal-menu&lt;/a&gt; package).&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cloud.githubusercontent.com/assets/177243/4414059/0e4e9a00-4510-11e4-924e-59db1c523557.png"&gt;&lt;/p&gt;
&lt;p&gt;With that in place, it was suddenly possible to write an app manager for webmaker, and I&#39;m pretty sure I can make it slightly more generic so that you, too, can use it for managing your multi-app setup without having to write all the scripts yourself. But that&#39;ll be for another post. For now, I&#39;m working on making sure that you can simple-navigate your way through our installer and be up and running in the time it takes to automatically run some installers, and not really much more:&lt;/p&gt;
&lt;p&gt;&lt;img src="gh-weblog/images/webmaker-menu-01.jpg"&gt;&lt;/p&gt;
&lt;p&gt;And you&#39;ll have the freedom to set up multiple run profiles so that you can run exactly what you want to run, when you need it:&lt;/p&gt;
&lt;p&gt;&lt;img src="gh-weblog/images/webmaker-menu-02.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Right now external dependencies like &lt;a href="https://www.java.com/en/download/index.jsp"&gt;Java&lt;/a&gt;, &lt;a href="www.elasticsearch.org/overview/elkdownloads"&gt;ElasticSearch&lt;/a&gt;, and &lt;a href="www.mongodb.org/downloads"&gt;MongoDB&lt;/a&gt; are still up to you, but hopefully I can somehow cleverly work that in, too, and then everything will be fantastic.&lt;/p&gt;
</description>
<category>Mozilla</category>
<category>Webmaker</category>
<category>Node</category>
<link>http://pomax.github.io/gh-blog/#gh-weblog-1411780655333</link>
<guid>http://pomax.github.io/gh-blog/#gh-weblog-1411780655333</guid>
<pubDate>Sat, 27 Sep 2014 01:17:35 GMT</pubDate>
</item>
<item>
<title>I've never met you, so I have no reason to trust you. or your CLA.</title>
<description>&lt;h1 id="i-ve-never-met-you-so-i-have-no-reason-to-trust-you-or-your-cla-"&gt;I&#39;ve never met you, so I have no reason to trust you. or your CLA.&lt;/h1&gt;
&lt;p&gt;You run an open source project, and I have a meaningful contribution for you. I&#39;d love to submit it, but now you&#39;re asking me for my personal information, without ever having shown that you can be trusted with that: I&#39;m not signing your CLA.&lt;/p&gt;
&lt;p&gt;You may have seen articles of the &quot;I will not sign your NDA&quot; variety popping up in your newsfeeds every now and then, and this post is in the same vein. I will not sign your CLA, and there&#39;s a very good reason for it.&lt;/p&gt;
&lt;p&gt;You probably have a cool project, and it was born out of some bigger effort, or you happen to work closely with a bigger effort. For instance, you&#39;re the  &lt;a href="polymer-project.org"&gt;polymer&lt;/a&gt; or &lt;a href="ttps://github.com/Khan/KaTeX"&gt;KaTeX&lt;/a&gt; project, and your code is really quite cool, and really quite useful, and I&#39;m not even being sarcastic here, I love both those projects. But the companies you work(ed) for know the troubles of contributors demands post-patch-acceptance, and they, or their lawyers, made you add a wholly unreasonable CLA to your project.&lt;/p&gt;
&lt;p&gt;Let&#39;s make this clear: I know what kind of shit storm can take place without a CLA. This is not a post about how &quot;you should not have to worry about this&quot;, because it&#39;s a very real thing; nor is this a post about how &quot;you shouldn&#39;t have a CLA, ever&quot;, because CLAs make sense for projects where an individual can properly ruin the party for many, many people. Chromium needs a CLA. The Firefox codebase needs a CLA. Twitter, Facebook, Kahn Academy, Google, all of those requiring you sign a CLA to work on their projects &lt;strong&gt;as part of their product offerings&lt;/strong&gt; are fine.&lt;/p&gt;
&lt;p&gt;But don&#39;t act bigger than you are. Asking people to tell you their name, phone number, and real world address, is kind of a big deal: what are you going to do with that information? How do I know you&#39;re not lying when you tell me it&#39;s only for legal purposes? What have you done to deserve my faith in you? What have you done to show none of your project members have access to that information? Because if I have a twitter spat with someone, they sure as hell shouldn&#39;t have the power to look up my phone number and home address in a CLA registry. And what have you done to show that the information you&#39;re asking for is even meaningful?&lt;/p&gt;
&lt;p&gt;There are reasons I won&#39;t sign a CLA for Google or Facebook: they haven&#39;t earned my trust. Kind of the opposite, really, I trust them to abuse my personal information for as many dollars as they can get out of it. However, I will happily sign a CLA with Mozilla, or the Red Cross, because they&#39;ve shown they can be trusted with this kind of information.&lt;/p&gt;
&lt;p&gt;Bottom line: I don&#39;t trust you. If you were a project born out of a Google idea and now you&#39;re on your own and you have nothing to do with actual Google projects (I&#39;m looking at you, Polymer) or you&#39;re a Kahn Academy project that is being spun as a replacement for MathJax, not tied into the Kahn Academy codebase at all (I&#39;m looking at you, KaTeX), then you are no longer Google or Kahn Academy. You&#39;re projects without the authority of your parent to back you up, and you&#39;re new on the open source map. I haven&#39;t heard anything bad about what you do with identity information from real human beings, but then I&#39;ve heard nothing good, either: I don&#39;t trust you, because I don&#39;t think it&#39;s unrealistic we&#39;re going to disagree on something in an issue I file, and I don&#39;t think it&#39;s unrealistic to imagine tempers might flare and someone&#39;s going to end up looking up my personal information and take things offline. I fully imagine that to be imaginary, but this is the real world, and you&#39;re asking for real, personally identifiable information. You need to earn the right to ask for that that; you don&#39;t have that right just because you&#39;re an open source project.&lt;/p&gt;
&lt;p&gt;Can you explain why you need my name, my phone number, and my real world address? &quot;The lawyers said it was okay&quot; is not a good enough answer. What if I have no phone? I actually don&#39;t, I have no use for one. What if I have no permanent address? I actually do, but I know people wo don&#39;t, and you can&#39;t read hacker news without hitting an article about people working out of coffee shops with $2500 macbooks but no permanent address fairly often. Can you explain why you&#39;re discriminating against people in this way? Because it&#39;s kind of bizarre, but there it is: your CLA is discriminating again those less well off. Kind of generally the kind of people who benefit most from open source projects (note: &quot;most&quot;; people with phones and permanent addresses obviously benefit from open source, but the less you have, the more important freely accessible tools are)&lt;/p&gt;
&lt;p&gt;For what a CLA was originally intended for, it has to discriminate at least enough to identify you as the person you claim to be, but if your project is not the used-by-millions powerhouse of a Discourse or Elasticsearch, your use of a CLA is not about making sure a patch is legally safe to merge in. You&#39;re just doing what you&#39;ve been told without asking whether that even made sense and fighting for open source. You&#39;re actually making open source feel worse by pretending we all need to sign these things before we can even contribute code and help build a better world. And ironically, the CLA, designed to make sure patches can be landed, actually sets an artificial bar for what you consider a worthy contributor. When you look at it that way, and I so very much do, it&#39;s kind of sad and sickening and I don&#39;t understand why you&#39;re denigrating people by insisting on a nonsense agreement for which I could make up random numbers and letters and you will not even question it because you have no way of verifying the information short of sending someone to the address I give you and calling the phone number I provided. To which I can claim to never be home, and that I changed phone numbers since signing that CLA.&lt;/p&gt;
&lt;p&gt;In the end, that CLA is &lt;em&gt;your&lt;/em&gt; insurance against &lt;em&gt;me&lt;/em&gt; not liking how you run your small project... so let&#39;s get real: we could have settled that issue with a single-line agreement that says &quot;by contributing you sign over all transferable rights pertaining to your contribution to this project&quot; and done. I don&#39;t trust you, and your CLA just told me you don&#39;t trust me either.&lt;/p&gt;
&lt;p&gt;Yeah, I think we&#39;re off to a great start.&lt;/p&gt;
</description>
<category>Open Source</category>
<category>CLA</category>
<link>http://pomax.github.io/gh-blog/#gh-weblog-1411176119356</link>
<guid>http://pomax.github.io/gh-blog/#gh-weblog-1411176119356</guid>
<pubDate>Sat, 20 Sep 2014 01:21:59 GMT</pubDate>
</item></channel>
</rss>
